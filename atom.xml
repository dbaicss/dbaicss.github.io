<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>皮特撸斯</title>
  
  <subtitle>做正确的事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dbaicss.github.io/"/>
  <updated>2019-10-17T05:51:21.149Z</updated>
  <id>https://dbaicss.github.io/</id>
  
  <author>
    <name>dbaicss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scheduler源码分析-番3-优选过程</title>
    <link href="https://dbaicss.github.io/2019/10/17/Scheduler%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E7%95%AA3-%E4%BC%98%E9%80%89%E8%BF%87%E7%A8%8B/"/>
    <id>https://dbaicss.github.io/2019/10/17/Scheduler源码分析-番3-优选过程/</id>
    <published>2019-10-17T01:24:43.000Z</published>
    <updated>2019-10-17T05:51:21.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解priority过程"><a href="#理解priority过程" class="headerlink" title="理解priority过程"></a>理解priority过程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">优选过程位于pkg/scheduler/core/generic_scheduler.go文件,主要是PrioritizeNodes方法,跟进去仔细看下</span><br><span class="line">这个函数特别长,我们先精简下!从注释理解就是PrioritizeNodes并发调用prioritize,每个prioritize会计算出一个分数,从0-10,表示从低到高</span><br><span class="line">每个prioritize还可以有权重,权重*分数=加权分,最终所有分值加起来即为该node的最终得分,通过分数来实现node的优先级</span><br></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">我们来看下这个方法的入参和出参,首先是入参:</span><br><span class="line">pod *v1.Pod* // pod信息；</span><br><span class="line">*nodeNameToInfo map[string]*schedulercache.NodeInfo // node信息；</span><br><span class="line">meta interface&#123;&#125; // 源数据信息,和predicate里的meta不太一样,具体会再分析；</span><br><span class="line">priorityConfigs []algorithm.PriorityConfig // 各种优选算法信息，上面的代码中多次体现；</span><br><span class="line">nodes []*v1.Node // node集合；</span><br><span class="line">extenders []algorithm.SchedulerExtender //字面意思调度扩展</span><br><span class="line">fwk framework.Framework // 看太明白的先跳过</span><br><span class="line">state *framework.CycleState //状态信息</span><br><span class="line">接下来看看出参:</span><br><span class="line">framework.NodeScoreList  // node分数列表,继续分析下这个列表</span><br><span class="line">// <span class="built_in">type</span> NodeScoreList []NodeScore</span><br><span class="line">// <span class="built_in">type</span> NodeScore struct &#123;</span><br><span class="line">// Name  string</span><br><span class="line">// Score int64</span><br><span class="line">// &#125;</span><br><span class="line">error   // 错误信息</span><br><span class="line">NodeScore这个struct的属性是Name和Score，保存的是一个节点的名字和分值，换句话说就是一个node在一个priority算法计算后所得到的结果,然后看NodeScoreList,就是NodeScore的集合,简单说就是多个node在priority算法计算后所得到的结果集</span><br><span class="line">func PrioritizeNodes(</span><br><span class="line">pod *v1.Pod,</span><br><span class="line">nodeNameToInfo map[string]*schedulernodeinfo.NodeInfo,</span><br><span class="line">meta interface&#123;&#125;,</span><br><span class="line">priorityConfigs []priorities.PriorityConfig,</span><br><span class="line">nodes []*v1.Node,</span><br><span class="line">extenders []algorithm.SchedulerExtender,</span><br><span class="line">fwk framework.Framework,</span><br><span class="line">state *framework.CycleState) (framework.NodeScoreList, error) &#123;</span><br><span class="line"></span><br><span class="line">    //特殊情况,没有优选算法配置,也没有扩展</span><br><span class="line">    <span class="keyword">if</span> len(priorityConfigs) == 0 &amp;&amp; len(extenders) == 0 &#123;</span><br><span class="line">        result := make(framework.NodeScoreList, 0, len(nodes))</span><br><span class="line"><span class="keyword">for</span> i := range nodes &#123;</span><br><span class="line">            // EqualPriorityMap优先级函数，对所有节点的权重都相等</span><br><span class="line">hostPriority, err := EqualPriorityMap(pod, meta, nodeNameToInfo[nodes[i].Name])</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line"><span class="built_in">return</span> nil, err</span><br><span class="line">&#125;</span><br><span class="line">result = append(result, hostPriority)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> result, nil</span><br><span class="line">    &#125;</span><br><span class="line">    // 这里定义锁，并发等待wg和错误集合errs；</span><br><span class="line">    var (</span><br><span class="line">        mu   = sync.Mutex&#123;&#125;</span><br><span class="line">        wg   = sync.WaitGroup&#123;&#125;</span><br><span class="line">        errs []error</span><br><span class="line">    )</span><br><span class="line">    // 这里定义了appendError函数，实现在并发条件下将错误信息收集到errs中；</span><br><span class="line">    appendError := func(err error) &#123;</span><br><span class="line">        mu.Lock()</span><br><span class="line">        defer mu.Unlock()</span><br><span class="line">        errs = append(errs, err)</span><br><span class="line">    &#125;</span><br><span class="line">    // results类型是[]framework.NodeScoreList，它保存的是所有算法作用作用于所有node之后得到的结果集，类似于二维数组，</span><br><span class="line">    // 每列是1个算法作用于1个节点的结果，每行表示该算法作用于所有节点的结果；一行展成一个二维就是所有算法作用于所有节点；</span><br><span class="line">    results := make([]framework.NodeScoreList, len(priorityConfigs), len(priorityConfigs))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //遍历prioritize的配置信息</span><br><span class="line"><span class="keyword">for</span> i := range priorityConfigs &#123;</span><br><span class="line">        ......</span><br><span class="line">&#125;</span><br><span class="line">    //ParallelizeUntil方法是不是很眼熟,没错,在初选过程中也用到这个方法</span><br><span class="line">workqueue.ParallelizeUntil(context.TODO(), 16, len(nodes), func(index int) &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := range priorityConfigs &#123;</span><br><span class="line">        ......</span><br><span class="line">&#125;</span><br><span class="line">//等待计算完成</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="keyword">if</span> len(errs) != 0 &#123;</span><br><span class="line"><span class="built_in">return</span> framework.NodeScoreList&#123;&#125;, errors.NewAggregate(errs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 各种计算分数插件,有亲和性的,反亲和性的, 根据label匹配的等等</span><br><span class="line">    state.Write(migration.PrioritiesStateKey, &amp;migration.PrioritiesStateData&#123;Reference: meta&#125;)</span><br><span class="line">scoresMap, scoreStatus := fwk.RunScorePlugins(state, pod, nodes)</span><br><span class="line"><span class="keyword">if</span> !scoreStatus.<span class="function"><span class="title">IsSuccess</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> framework.NodeScoreList&#123;&#125;, scoreStatus.AsError()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 汇总分数,生成result这个二维数组</span><br><span class="line">    result := make(framework.NodeScoreList, 0, len(nodes))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := range nodes &#123;</span><br><span class="line">result = append(result, framework.NodeScore&#123;Name: nodes[i].Name, Score: 0&#125;)</span><br><span class="line"><span class="keyword">for</span> j := range priorityConfigs &#123;</span><br><span class="line">result[i].Score += results[j][i].Score * priorityConfigs[j].Weight</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j := range scoresMap &#123;</span><br><span class="line">result[i].Score += scoresMap[j][i].Score</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> len(extenders) != 0 &amp;&amp; nodes != nil &#123;</span><br><span class="line">combinedScores := make(map[string]int64, len(nodeNameToInfo))</span><br><span class="line"><span class="keyword">for</span> i := range extenders &#123;</span><br><span class="line"><span class="keyword">if</span> !extenders[i].IsInterested(pod) &#123;</span><br><span class="line"><span class="built_in">continue</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Add(1)</span><br><span class="line">go func(extIndex int) &#123;</span><br><span class="line">defer wg.Done()</span><br><span class="line">                //调用prioritize方法</span><br><span class="line">prioritizedList, weight, err := extenders[extIndex].Prioritize(pod, nodes)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">// Prioritization errors from extender can be ignored, <span class="built_in">let</span> k8s/other extenders determine the priorities</span><br><span class="line"><span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line">mu.Lock()</span><br><span class="line"><span class="keyword">for</span> i := range *prioritizedList &#123;</span><br><span class="line">host, score := (*prioritizedList)[i].Host, (*prioritizedList)[i].Score</span><br><span class="line"><span class="keyword">if</span> klog.V(10) &#123;</span><br><span class="line">klog.Infof(<span class="string">"%v -&gt; %v: %v, Score: (%d)"</span>, util.GetPodFullName(pod), host, extenders[extIndex].Name(), score)</span><br><span class="line">&#125;</span><br><span class="line">combinedScores[host] += score * weight</span><br><span class="line">&#125;</span><br><span class="line">mu.Unlock()</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">// <span class="built_in">wait</span> <span class="keyword">for</span> all go routines to finish</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="keyword">for</span> i := range result &#123;</span><br><span class="line">result[i].Score += combinedScores[result[i].Name] * (framework.MaxNodeScore / extenderv1.MaxExtenderPriority)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> result, nil</span><br><span class="line">&#125;</span><br><span class="line">优选过程主要流程就是这些</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;理解priority过程&quot;&gt;&lt;a href=&quot;#理解priority过程&quot; class=&quot;headerlink&quot; title=&quot;理解priority过程&quot;&gt;&lt;/a&gt;理解priority过程&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Scheduler源码分析-番2-初选过程</title>
    <link href="https://dbaicss.github.io/2019/10/16/Scheduler%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E7%95%AA2-%E5%88%9D%E9%80%89%E8%BF%87%E7%A8%8B/"/>
    <id>https://dbaicss.github.io/2019/10/16/Scheduler源码分析-番2-初选过程/</id>
    <published>2019-10-16T09:12:54.000Z</published>
    <updated>2019-10-16T10:09:50.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Predicates目的"><a href="#Predicates目的" class="headerlink" title="Predicates目的"></a>Predicates目的</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接上篇,predicates开始于pkg/scheduler/core/generic_scheduler.go文件中findNodesThatFit()方法,实现基于predicate各个<span class="built_in">functions</span>过滤出所有满足运行pod的node列表</span><br></pre></td></tr></table></figure><h2 id="Predicates并发"><a href="#Predicates并发" class="headerlink" title="Predicates并发"></a>Predicates并发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">说到predicates的并发,就得重点关注下ParallelizeUntil方法</span><br><span class="line">func ParallelizeUntil(ctx context.Context, workers, pieces int, doWorkPiece DoWorkPieceFunc) &#123;</span><br><span class="line">    //注意:在findNodesThatFit()方法中是这样子调用的workqueue.ParallelizeUntil(ctx, 16, int(allNodes), checkNode),</span><br><span class="line">    //也是说worker实参是16,pieces是allnodes,也就是node数量,doWorkPiece是个匿名函数,checkNode就是匿名函数的实现</span><br><span class="line">var stop &lt;-chan struct&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> ctx != nil &#123;</span><br><span class="line">stop = ctx.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toProcess := make(chan int, pieces)</span><br><span class="line"><span class="keyword">for</span> i := 0; i &lt; pieces; i++ &#123;</span><br><span class="line">        //写node总数的数字到channel里</span><br><span class="line">toProcess &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">    //关闭channel</span><br><span class="line">close(toProcess)</span><br><span class="line"></span><br><span class="line">    //node数量小于16,就用node数量作为线程数</span><br><span class="line"><span class="keyword">if</span> pieces &lt; workers &#123;</span><br><span class="line">workers = pieces</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(workers)</span><br><span class="line"><span class="keyword">for</span> i := 0; i &lt; workers; i++ &#123;</span><br><span class="line">        //协程并发</span><br><span class="line">go <span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">defer utilruntime.HandleCrash()</span><br><span class="line">defer wg.Done()</span><br><span class="line"><span class="keyword">for</span> piece := range toProcess &#123;</span><br><span class="line">select &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-stop:</span><br><span class="line"><span class="built_in">return</span></span><br><span class="line">default:</span><br><span class="line">                    //对应就是匿名函数checkNode(num)</span><br><span class="line">doWorkPiece(piece)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">    //协程跑完</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="One-Node-Predicates"><a href="#One-Node-Predicates" class="headerlink" title="One Node Predicates"></a>One Node Predicates</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">主要是pkg/scheduler/core/generic_scheduler.go文件中podFitsOnNode方法,我们来看下这个函数的入参和出参</span><br><span class="line">入参有:</span><br><span class="line">state *framework.CycleState,</span><br><span class="line">pod *v1.Pod,</span><br><span class="line">meta predicates.PredicateMetadata,</span><br><span class="line">info *schedulernodeinfo.NodeInfo,</span><br><span class="line">predicateFuncs map[string]predicates.FitPredicate,</span><br><span class="line">queue internalqueue.SchedulingQueue,</span><br><span class="line">alwaysCheckAllPredicates bool,</span><br><span class="line">出参有:</span><br><span class="line">bool</span><br><span class="line">[]algorithm.PredicateFailureReason</span><br><span class="line">*framework.Status</span><br><span class="line">error</span><br><span class="line">字母意思理解下入参pod信息,元数据信息,缓存信息,初选函数,node缓存信息(用于pod信息一致,可直接返回初选node结果),队列,是否总是走初选,最后一个不太清楚,出参则更好理解了,是否初选到,初选失败原因,错误信息等</span><br><span class="line">我们来看下函数实现</span><br><span class="line">func (g *genericScheduler) podFitsOnNode(</span><br><span class="line">state *framework.CycleState,</span><br><span class="line">pod *v1.Pod,</span><br><span class="line">meta predicates.PredicateMetadata,</span><br><span class="line">info *schedulernodeinfo.NodeInfo,</span><br><span class="line">predicateFuncs map[string]predicates.FitPredicate,</span><br><span class="line">queue internalqueue.SchedulingQueue,</span><br><span class="line">alwaysCheckAllPredicates bool,</span><br><span class="line">) (bool, []predicates.PredicateFailureReason, *framework.Status, error) &#123;</span><br><span class="line">var failedPredicates []predicates.PredicateFailureReason</span><br><span class="line">var status *framework.Status</span><br><span class="line">podsAdded := <span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> i := 0; i &lt; 2; i++ &#123;</span><br><span class="line">        //这里的2次循环,个人理解为防止优先级更高的pod调度和亲和性的问题,如果2次初选都成功,则认为这个初选是成功的</span><br><span class="line">metaToUse := meta</span><br><span class="line">stateToUse := state</span><br><span class="line">nodeInfoToUse := info</span><br><span class="line"><span class="keyword">if</span> i == 0 &#123;</span><br><span class="line">var err error</span><br><span class="line">podsAdded, metaToUse, stateToUse, nodeInfoToUse, err = g.addNominatedPods(pod, meta, state, info, queue)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>, []predicates.PredicateFailureReason&#123;&#125;, nil, err</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> !podsAdded || len(failedPredicates) != 0 &#123;</span><br><span class="line"><span class="built_in">break</span></span><br><span class="line">&#125;</span><br><span class="line">        //[predicates.Ordering()返回的是]string，predicate名字list</span><br><span class="line"><span class="keyword">for</span> _, predicateKey := range predicates.<span class="function"><span class="title">Ordering</span></span>() &#123;</span><br><span class="line">var (</span><br><span class="line">fit     bool</span><br><span class="line">reasons []predicates.PredicateFailureReason</span><br><span class="line">err     error</span><br><span class="line">)</span><br><span class="line">            //如果predicateKey存在,则调用该predicate</span><br><span class="line"><span class="keyword">if</span> predicate, exist := predicateFuncs[predicateKey]; exist &#123;</span><br><span class="line">                //调用predicate</span><br><span class="line">fit, reasons, err = predicate(pod, metaToUse, nodeInfoToUse)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>, []predicates.PredicateFailureReason&#123;&#125;, nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !fit &#123;</span><br><span class="line">failedPredicates = append(failedPredicates, reasons...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status = g.framework.RunFilterPlugins(stateToUse, pod, nodeInfoToUse)</span><br><span class="line"><span class="keyword">if</span> !status.IsSuccess() &amp;&amp; !status.<span class="function"><span class="title">IsUnschedulable</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>, failedPredicates, status, status.AsError()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> len(failedPredicates) == 0 &amp;&amp; status.IsSuccess(), failedPredicates, status, nil</span><br><span class="line">&#125;</span><br><span class="line">predicatesOrdering定义了下面一堆规则</span><br><span class="line">predicatesOrdering = []string&#123;</span><br><span class="line">       CheckNodeConditionPred, </span><br><span class="line">       CheckNodeUnschedulablePred,</span><br><span class="line">       GeneralPred, </span><br><span class="line">       HostNamePred, </span><br><span class="line">       PodFitsHostPortsPred,</span><br><span class="line">       MatchNodeSelectorPred, </span><br><span class="line">       PodFitsResourcesPred, </span><br><span class="line">       NoDiskConflictPred,</span><br><span class="line">       PodToleratesNodeTaintsPred, </span><br><span class="line">       PodToleratesNodeNoExecuteTaintsPred, </span><br><span class="line">       CheckNodeLabelPresencePred,</span><br><span class="line">       CheckServiceAffinityPred, </span><br><span class="line">       MaxEBSVolumeCountPred, </span><br><span class="line">       MaxGCEPDVolumeCountPred, </span><br><span class="line">       MaxCSIVolumeCountPred,</span><br><span class="line">       MaxAzureDiskVolumeCountPred, </span><br><span class="line">       CheckVolumeBindingPred, </span><br><span class="line">       NoVolumeZoneConflictPred,</span><br><span class="line">       CheckNodeMemoryPressurePred, </span><br><span class="line">       CheckNodePIDPressurePred, </span><br><span class="line">       CheckNodeDiskPressurePred, </span><br><span class="line">       MatchInterPodAffinityPred&#125;</span><br><span class="line">当然也可以用配置文件覆盖,类似于下面这种</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"kind"</span> : <span class="string">"Policy"</span>,</span><br><span class="line"><span class="string">"apiVersion"</span> : <span class="string">"v1"</span>,</span><br><span class="line"><span class="string">"predicates"</span> : [</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"PodFitsHostPorts"</span>, <span class="string">"order"</span>: 2&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"PodFitsResources"</span>, <span class="string">"order"</span>: 3&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"NoDiskConflict"</span>, <span class="string">"order"</span>: 5&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"PodToleratesNodeTaints"</span>, <span class="string">"order"</span>: 4&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"MatchNodeSelector"</span>, <span class="string">"order"</span>: 6&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"PodFitsHost"</span>, <span class="string">"order"</span>: 1&#125;</span><br><span class="line">    ],</span><br><span class="line"><span class="string">"priorities"</span> : [</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"LeastRequestedPriority"</span>, <span class="string">"weight"</span> : 1&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"BalancedResourceAllocation"</span>, <span class="string">"weight"</span> : 1&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"ServiceSpreadingPriority"</span>, <span class="string">"weight"</span> : 1&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"EqualPriority"</span>, <span class="string">"weight"</span> : 1&#125;</span><br><span class="line">    ],</span><br><span class="line"><span class="string">"hardPodAffinitySymmetricWeight"</span> : 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单个Predicate执行动作"><a href="#单个Predicate执行动作" class="headerlink" title="单个Predicate执行动作"></a>单个Predicate执行动作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">其实很清晰,就在这一行</span><br><span class="line">fit, reasons, err = predicate(pod, metaToUse, nodeInfoToUse)</span><br></pre></td></tr></table></figure><h2 id="Predicate函数"><a href="#Predicate函数" class="headerlink" title="Predicate函数"></a>Predicate函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Predicate实现见pkg/scheduler/algorithm/predicates/predicates.go文件,我们来看1个predicate func</span><br><span class="line">func PodMatchNodeSelector(pod *v1.Pod, meta PredicateMetadata, nodeInfo *schedulernodeinfo.NodeInfo) (bool, []PredicateFailureReason, error) &#123;</span><br><span class="line">node := nodeInfo.Node()</span><br><span class="line"><span class="keyword">if</span> node == nil &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>, nil, fmt.Errorf(<span class="string">"node not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> PodMatchesNodeSelectorAndAffinityTerms(pod, node) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span>, nil, nil</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>, []PredicateFailureReason&#123;ErrNodeSelectorNotMatch&#125;, nil</span><br><span class="line">&#125;</span><br><span class="line">入参是pod,metadata,info,出参是bool,[]PredicateFailureReason,error,如上所示,标准的单个predicate实现</span><br><span class="line">函数功能也很清晰,根据label selector过滤和Affinity判断亲和性是否满足要求,返回<span class="literal">true</span>/<span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Predicates目的&quot;&gt;&lt;a href=&quot;#Predicates目的&quot; class=&quot;headerlink&quot; title=&quot;Predicates目的&quot;&gt;&lt;/a&gt;Predicates目的&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Scheduler源码分析</title>
    <link href="https://dbaicss.github.io/2019/10/15/Scheduler%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://dbaicss.github.io/2019/10/15/Scheduler源码分析/</id>
    <published>2019-10-15T06:02:38.000Z</published>
    <updated>2019-10-15T10:25:22.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scheduler作用"><a href="#Scheduler作用" class="headerlink" title="Scheduler作用"></a>Scheduler作用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scheduler一句话总结是主动请求api server,获取等待调度的pod信息列表,通过一系列的调度算法,帅选出满足需求的node, 将pod和node的绑定关系返回给api server,从而完成整个pod调度的过程</span><br></pre></td></tr></table></figure><h2 id="Scheduler代码结构"><a href="#Scheduler代码结构" class="headerlink" title="Scheduler代码结构"></a>Scheduler代码结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Scheduler代码结构比较清晰,主要分为三个部分</span><br><span class="line">①. cmd/kube-scheduler/scheduler.go: 入口函数,完成一系列初始化动作</span><br><span class="line">②. pkg/scheduler/scheduler.go:  调度的具体逻辑</span><br><span class="line">③. pkg/scheduler/core/generic_scheduler.go: 具体的调度算法实现</span><br></pre></td></tr></table></figure><h2 id="接下来让我们逐个分析"><a href="#接下来让我们逐个分析" class="headerlink" title="接下来让我们逐个分析"></a>接下来让我们逐个分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cmd/kube-scheduler/scheduler.go, 入口函数,完成一系列初始化环境,读取配置,鉴权等操作,没什么好说的,直接跳过</span><br><span class="line">pkg/scheduler/scheduler.go, 调度的具体逻辑,从入口函数一路跟进去,NewSchedulerCommand()-&gt;runCommand()-&gt;Run()-&gt;sched.Run()-&gt;sched.scheduleOne,代码删除掉一些非线性逻辑之后如下:</span><br><span class="line">func (<span class="built_in">sched</span> *Scheduler) <span class="function"><span class="title">scheduleOne</span></span>() &#123;</span><br><span class="line">fwk := sched.Framework</span><br><span class="line">scheduleResult, err := sched.Algorithm.Schedule(state, pod)</span><br><span class="line">// Run <span class="string">"reserve"</span> plugins.</span><br><span class="line">// Run <span class="string">"permit"</span> plugins.</span><br><span class="line">// Run <span class="string">"prebind"</span> plugins.</span><br><span class="line">err := sched.bind(assumedPod, scheduleResult.SuggestedHost, state)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">主要的逻辑包括翻转插件,允许使用的插件,预绑定pod和node,以及绑定pod和node逻辑</span><br><span class="line">sched.Algorithm.Schedule跟进去可以看到定义了interface,包括6个方法</span><br><span class="line"><span class="built_in">type</span> ScheduleAlgorithm interface &#123;</span><br><span class="line">Schedule(*framework.CycleState, *v1.Pod) (scheduleResult ScheduleResult, err error)</span><br><span class="line">Preempt(*framework.CycleState, *v1.Pod, error) (selectedNode *v1.Node, preemptedPods []*v1.Pod, cleanupNominatedPods []*v1.Pod, err error)</span><br><span class="line">Predicates() map[string]predicates.FitPredicate</span><br><span class="line">Prioritizers() []priorities.PriorityConfig</span><br><span class="line">Extenders() []algorithm.SchedulerExtender</span><br><span class="line">&#125;</span><br><span class="line">关键的方法有三个,preempt抢占,predicates预选,prioritizers优选,另外三个方法不用太多关注</span><br><span class="line">sched.Algorithm.Schedule实际调用的是genericScheduler.Schedule()方法，在pkg/scheduler/core/generic_scheduler.go,总结起来就是尝试将指定的pod调度到给定的node列表中的一个，成功则返回node名字</span><br><span class="line">完整的业务流程图如下:</span><br></pre></td></tr></table></figure><p><img src="/images/scheduler-flow.png" alt="scheduler流程图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Scheduler作用&quot;&gt;&lt;a href=&quot;#Scheduler作用&quot; class=&quot;headerlink&quot; title=&quot;Scheduler作用&quot;&gt;&lt;/a&gt;Scheduler作用&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
